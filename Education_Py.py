# -*- coding: utf-8 -*-
"""การเรียนการสอน.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dlW-pxV9RPIlodp8UxOuwxMEtiME8_3M

# การเรียนการสอน


*   นางสาวณกมล ทรัพย์ฟูเกียรติ 6409620025
*   นายชุติพนธ์ กัลยาประสิทธิ์ 6409680110

# Import Library & Data
"""

pip install pythainlp

import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
import bokeh.plotting as bplt
import re

import wordcloud
from wordcloud import WordCloud

import pythainlp
from pythainlp import word_tokenize
from pythainlp.corpus import get_corpus

from google.colab import drive
drive.mount('/content/drive')

data=pd.read_csv('/content/drive/MyDrive/CS246/Copy of แบบสอบถามความคาดหวังของการเรียนการสอนใน~งนักศึกษามหาวิทยาลัยธรรมศาสตร์ (Responses) - Form Responses 1 (1).csv')
data

type(data)

data.info()

!wget -q https://github.com/Phonbopit/sarabun-webfont/raw/master/fonts/thsarabunnew-webfont.ttf
mpl.font_manager.fontManager.addfont('thsarabunnew-webfont.ttf')
mpl.rc('font', family='TH Sarabun New',size = 18)

path = '/content/drive/MyDrive/CS246/Prompt-Black.ttf'

"""# ส่วนที่ 1 : ข้อมูลส่วนตัวของนักศึกษามหาวิทยาลัยธรรมศาสตร์

**เพศ**
"""

sex = data.groupby('เพศ')
sex = sex.size()
print(sex)

fig = px.pie(values=sex.values, names=sex.index,
             color_discrete_sequence=px.colors.qualitative.Pastel1)
fig.update_traces(texttemplate = "%{value} <br>(%{percent})",
                 textposition = "outside")
fig.update_layout(
    title={
        'text': "จำนวนนักศึกษาในมหาลัยแบ่งตามเพศ",
        'x': 0.5
    },
    font_family='TH Sarabun New',
    title_font_family='TH Sarabun New',
    height=700, width=700,legend=dict(
        title="เพศ",
        orientation="h",
        yanchor="bottom",
        y=1,
        xanchor="center",
        x=0.5
    )
 )
fig.show()

"""**ระดับชั้นปี**"""

mpl.rc('font', family='TH Sarabun New',size = 12)

year = data.groupby('ระดับชั้นปี')
year = year.size()
print(year)

years = ['ปีที่ 1(รหัส66)', 'ปีที่ 2(รหัส65)', 'ปีที่ 3(รหัส64)', 'ปีที่ 4(รหัส63)', 'สูงกว่าชั้นปีที่ 4']
counts = [13, 27, 54, 11, 4]

colors = ['#B6BBC7', '#FAC2AC', '#BEE6A0', '#9BCAE7', '#D6C3CE']

fig = go.Figure(data=[go.Bar(y=years, x=year.values, orientation='h',
                             text=year.values, textposition='inside',
                             marker=dict(color=colors))])
fig.update_layout(title={
        'text': "สัดส่วนแต่ละชั้นปีที่กรอกแบบฟอร์ม",
        'x': 0.5},
                  xaxis_title='จำนวนคน',
                  yaxis_title='คำตอบ',
                  font_family='TH Sarabun New',
                  title_font_family='TH Sarabun New')
fig.show()

"""**คณะ**"""

faculty = data.groupby('คณะ')
faculty = faculty.size()
print(faculty)

fig = px.pie(values=faculty.values, names=faculty.index,
             color_discrete_sequence=px.colors.qualitative.Set3)
fig.update_traces(texttemplate = "%{value} <br>(%{percent})",
                 textposition = "outside")
fig.update_layout(
    title={
        'text': "จำนวนนักศึกษาในมหาลัยแบ่งตามคณะที่ศึกษา",
        'x': 0.5, 'y': 0.85
    },
    font_family="TH Sarabun New",
    title_font_family='TH Sarabun New',
    height=1100, width=1000,legend=dict(
        title="คณะ",
        yanchor="bottom",
        y=0.001
    )
 )
fig.show()

"""**สาขาวิชา**"""

major = data.groupby('สาขาวิชา (ถ้าไม่มีทำเครื่องหมาย -)')
major = major.size()
print(major)

data_major = {
    '-': 25, 'สถิติ': 24, 'วิทยาการคอมพิวเตอร์': 9, 'คณิตศาสตร์และสถิติ': 2, 'เครื่องกล': 2, 'การฝึกสอน': 2,
    'การฝึกสอนกีฬา': 2, 'คณิตศาสตร์ประยุกต์': 2, 'การเงิน': 2, 'การจัดการกีฬา': 2, 'อาชีวอนามัยและความปลอดภัย': 1,
    'วิศวกรรมคอมพิวเตอร์': 1, 'คณิตศาสตร์': 1, 'การส่งเสริมสุขภาพ': 1, 'สถิติประยุกต์': 1, 'ผังเมือง': 1, 'ภาษาญี่ปุ่น': 1,
    'สถิติประยุกต์ ภาคพิเศษ': 1, 'วิจัยทางสังคม': 1, 'การผังเมือง': 1, 'ซอฟแวร์': 1, 'การจัดการทางวิศวกรรม': 1,
    'Comsci': 1, 'ผังเมือง': 1, 'วิทยุโทรทัศน์': 1, 'สถิติ ภาคปกติ': 1, 'นวัตกรรมการพัฒนาอสังหาริมทรัพย์': 1,
    '่้่-': 1, 'ภาษาอังกฤษ': 1, 'คอมพิวเตอร์': 1, 'วิจัยสังคม': 1, 'เทคโนโลยีสิ่งทอ': 1, 'ฟิสิกอิเล็ก': 1,
    'คอม': 1, 'คณิตศาสตร์การเงิน': 1, 'การเมืองการปกครอง': 1, 'วัศดุศาสตร์': 1, 'การตลาด': 1, 'บริหารรัฐกิจ': 1,
    'เคมี': 1, 'วิทย์คอม': 1, 'เทคโนโลยีอาหาร': 1, 'วัสดุศาสตร์': 1, 'นวตกรรมอาหาร': 1, 'เทคโนโลยีสารสนเทศ': 1,
    'วิชาวิศวกรรมโยธาและการบริหารการก่อสร้าง': 1, 'วิศวกรรมคอมพิวเตอร์ ': 1
}
colors = [data_major[key] for key in data_major.keys()]

fig = px.bar(x=list(data_major.keys()), y=list(data_major.values()), labels={'x': 'สาขา', 'y': 'จำนวนนักศึกษา'},
             color=colors, color_continuous_scale='Blues')

fig.update_traces(text=list(data_major.values()), textposition='outside')

fig.update_layout(width=900, height=600,title={
        'text': "จำนวนนักศึกษาในมหาลัยแบ่งตามคณะที่ศึกษา",
        'x': 0.5
    },            font_family="TH Sarabun New",
                  title_font_family='TH Sarabun New')

fig.show()


#ลองกรุ

"""# ส่วนที่ 2 : ความพึงพอใจของการเรียนการสอนในปัจจุบัน

**เหตุผลที่ท่านเข้ารับการศึกษาในมหาวิทยาลัยธรรมศาสตร์**
"""

#นำแถวที่มี '-' ออก
reason1 = data.drop(data[data['เหตุผลที่ท่านเข้ารับการศึกษาในมหาวิทยาลัยธรรมศาสตร์'] == '-'].index)
#เปลี่ยนสัญลักษณ์ในแถวที่มี ',' & '/' & 'และ' เป็น ' '
reason1['เหตุผลที่ท่านเข้ารับการศึกษาในมหาวิทยาลัยธรรมศาสตร์'] = reason1['เหตุผลที่ท่านเข้ารับการศึกษาในมหาวิทยาลัยธรรมศาสตร์'].str.replace(',',' ')
reason1['เหตุผลที่ท่านเข้ารับการศึกษาในมหาวิทยาลัยธรรมศาสตร์'] = reason1['เหตุผลที่ท่านเข้ารับการศึกษาในมหาวิทยาลัยธรรมศาสตร์'].str.replace('/',' ')
reason1['เหตุผลที่ท่านเข้ารับการศึกษาในมหาวิทยาลัยธรรมศาสตร์'] = reason1['เหตุผลที่ท่านเข้ารับการศึกษาในมหาวิทยาลัยธรรมศาสตร์'].str.replace('และ',' ')
#เปลี่ยนคแลัมน์ 'เหตุผลที่ท่านเข้ารับการศึกษาในมหาวิทยาลัยธรรมศาสตร์' เป็นชนิด list
word = reason1['เหตุผลที่ท่านเข้ารับการศึกษาในมหาวิทยาลัยธรรมศาสตร์'].values.tolist()
#แบ่งคำ/ประโยคในแต่ละelement
wordLists = []
for w in word:
  wordList = w.split(' ')
  wordLists.extend(wordList)
#ตัด element ที่เป็น ' ' ออก
for wo in wordLists:
  if wo == '':
    wordLists.remove(wo)
#นำทุก elements ใน list มารวมเป็นหนึ่ง str
all_word = ' '.join(wordLists).lower().strip('')
#จัดกลุ่มคำที่มีความหมายคล้ายๆกันอยู่ในคำเดียวกัน
all_word = re.sub('(สภาพแสดล้อม|ชอบบรรยากาศ|สภาพแวดล้อมดี|ชอบบรรยากาศความธรรมศาสต์|ชอบอากาศในมหาวิทยาลัย|\
      ชอบสังคมมหาลัย|สภาพแวดล้อมที่ดี|บรรยากาศ|เป็นมหาวิทยาลัยที่มีสภาพเเวดล้อมเเละธรรมชาติดี|\
      ชอบบรรยากาศในมอ|สภาพแวดล้อมของมหาลัย)','สภาพแวดล้อม',all_word)
all_word = re.sub('(สอบติดที่นี้|เพราะยื่นแล้วติด|สอบติดสาขานี้|คะแนนสูงสุดที่เข้าได้|บังเอิญสอบติด|สอบติด|\
      ติด|เพราะสอบติดที่นี่ค่ะ|ติดเลยเข้าเลย|ยื่นลำดับแล้วติด|เพราะสอบติดในรอบแรกพอดี|ติด)','สอบติด',all_word)
all_word = re.sub('(เป็นมหาวิทยาลัยชั้นนำของประเทศ|เป็นมหาวิทยาลัยชั้นนำ|เป็นมหาวิทยาชัยชั้นนำ)','มหาวิทยาลัยชั้นนำ',all_word)
all_word = re.sub('(ชื่อเสียงมหาลัย|มหาวิทยาลัยมีชื่อเสียง|เป็นมหาลัยที่มีชื่อเสียง|มีชื่อเสียง|ชื่อเสียงของมหาวิทยาลัย|สถาบันชื่อดัง|\
      มีชื่อเสียง|มอดังครับ|มหาลัยดัง|มอมีชื่อเสียง|เพราะคิดว่าธรรมศาสตร์เป็นมหาลัยที่ค่อนข้างมีชื่อเสียง|มอดัง|มีชื่อเสียง|\
      เพราะเป็นมหาลัยที่มีชื่อเสียง|มีชื่อเสียง|ชื่อเสียงของมหาวิทยาลัย|มหาลัยชื่อดัง|เป็นมหาลัยที่มีชื่อเสียง)','ชื่อเสียง',all_word)
all_word = re.sub('(เสรีภาพ|อยากทำไรก้ได้ไม่มีใครสนใจ|เพราะว่าเป็นมหาลัยที่เสรี|มีความอิสระ|เพราะธรรมศาสตร์เป็นดินแดนแห่งเสรีภาพ|\
      เพราะมีอิสระในการใช้ชีวิต|ให้อิสระทางความคิด|เสรีภาพในวิทยาลัย|ความอิสระที่ตอบสนองความต้องการ|\
      เพราะธรรมศาสตร์เป็นดินแดนแห่งเสรีภาพ|การให้อิสระกับนักศึกษา|จุดสำคัญคือเสรีในด้านความคิดเห็นต่างๆ|\
      มหาลัยให้อิสระกับความคิด|มีเสรีภาพทางความคิด|ดูมีความเป็นอิสระ|อิสระเสรีในวิทยาลัย)','อิสระเสรี',all_word)
all_word = re.sub('(มหาลัยดีมาก|เป็นมหาลัยที่อยู่อันดับต้นๆของประเทศ|มีมาตราฐานที่ดี)','มหาลัยดี',all_word)
all_word = re.sub('(คุณภาพ|คิดว่าเป็นมหาลัยมีคุณภาพ|เป็นมหาวิทยาลัยที่มีคุณภาพ|เป็นมหาวิทยาลัยที่มีมาตรฐาน)','คุณภาพมหาลัย',all_word)
all_word = re.sub('(ชอบมากที่สุด|ก่อนเข้าชอบมหาวิทยาลัย|ชอบสถาบัน|เพราะชื่นชอบมหาวิทยาลัย|ชอบในมหาวิทยาลัย)','ชอบ',all_word)
all_word = re.sub('(เป็นหนึ่งมหาวิทยาลัยที่ต้องการจะเข้าอยู่แล้ว|เป็นมหาวิทยาลัยที่ต้องการศึกษาตั้งแต่แรก|อยากเข้าครับ|\
      อยากเข้าค่ะ)','ต้องการเข้า',all_word)
all_word = re.sub('(คิดว่าคอนเนคชั่นน่าจะเยอะ|มีคอนเนคชั่นที่ดี)','คอนเนคชัน',all_word)
all_word = re.sub('(หลักสูตร|หลักสูตรการสอน|หลักสูตรน่าสนใจ|รวมถึงตัวหลักสูตรเองด้วย|มีหลักสูตรที่สนใจ|\
      สาขามีหลักสูตรที่สนใจ|หลักสูตรการเรียนการสอน|เพราะเป็นมหาวิทยาลัยที่ชื่อเสียงเเล้วสาขาที่เข้าชื่อก็น่าสนใจดี)','หลักสูตร',all_word)
all_word = re.sub('(การทำงานในอนาคตฅ|มีผลต่อการรับเข้าทำงาน|มองเห็นการต่อยอดในอนาคตได้|\
      เอาชื่อมหาลัยก่อนในอนาคตหางานได้|โอกาสในการทำงานในอนาคต)','ใช้ในอนาคต',all_word)
all_word = re.sub('(ได้ใส่ชุดไปรเวท|เห็นที่รุ่นพี่รีวิวว่าเราไม่จำเป็นต้องใส่ชุดนักศึกษามาเรียนก็ทำให้น่าสนใจ)','การแต่งตัว',all_word)
all_word = re.sub('(ชอบคณะนี้จึงยื่นเข้ามา|คณะที่สนใจในมหาลัยนี้มีชื่อเสียงเป็นอย่างมาก|ได้คณะที่อยากเข้า|ชอบคณะนี้|คณะที่ตัวเองอยู่มีชื่อเสียง)','คณะ',all_word)
all_word = re.sub('(โลโก้มหาลัยเป็นสีเหลือง|ส่วนตัวชอบสีเหลืองคั้บบ)','สีเหลือง',all_word)
all_word = re.sub('(ระบบการศึกษา|ความน่าเชื่อถือทางด้านการศึกษา)','ระบบการศึกษา',all_word)
all_word = re.sub('(มีพี่เรียนมธ|พี่เลือกให้|พ่อต้องการให้เข้า)','ครอบครัว',all_word)
all_word = re.sub('(มีคสามเท่าเทียม|ความเท่าเทียมของทุกคน)','ความเท่าเทียม',all_word)

wordcloud = WordCloud(font_path=path, #กำหนดfontที่ใช้แสดงผล
                      stopwords = {'มธ','มธ.','รู้สึกว่า'} ,#คำที่ไม่ให้แสดงผล(ไม่ได้ใช้)
                      background_color="white",
                      width=1024, # กว้าง
                      height=768, # ยาว
                      #colormap = 'turbo', #ธีมสีในคำ
                      #colormap = 'nipy_spectral',
                      colormap = 'tab20',
                      collocations=False,
                      regexp=r"[\u0E00-\u0E7Fa-zA-Z']+",
                      prefer_horizontal = 0.7, #แสดงผลแนวนอน 0.7
                      max_words = 30
                      ).generate(all_word)
plt.imshow(wordcloud, cmap=plt.cm.gray, interpolation='bilinear')
plt.axis("off")
plt.show()

"""**ความพึงพอใจของการเรียนการสอนในด้านต่างๆ**"""

scale = { '(มากที่สด)': 5, '(มาก)': 4, '(ปานกลาง)': 3, '(น้อย)': 2, '(น้อยทสด)': 1 }
satisfication = data.loc[: , ['ท่านพึงพอใจกับสภาพแวดล้อมการเรียนรู้',
                  'ท่านคิดว่าสภาพแวดล้อมการเรียนรู้มีผลต่อประสิทธิภาพในการเรียนการสอน',
                  'ท่านมีความพึงพอใจในวิธีการสอนของครูหรืออาจารย์',
                  'ท่านรู้สึกว่าครูหรืออาจารย์มีส่วนร่วมในการสร้างประสบการณ์การเรียนที่ดี',
                  'ท่านรู้สึกพึงพอใจกับการเรียนรู้ในระหว่างการเรียน',
                  'ท่านรู้สึกว่าความตั้งใจในการเรียนรู้มีผลต่อการประสบความสำเร็จในการเรียน',
                  'ท่านพึงพอใจกับสื่อการสอนที่ใช้ในชั้นเรียน (เช่น หนังสือเรียน, วิดีโอการสอน, หรือโปรแกรมคอมพิวเตอร์)',
                  'ท่านคิดว่าการใช้เทคโนโลยีสารสนเทศและการสื่อสารมีผลต่อการเรียนการสอน',
                  'ท่านคิดว่าสภาพแวดล้อมสังคมและวัฒนธรรมมีผลต่อการเรียนการสอน',
                  'ท่านพึงพอใจกับโครงสร้างและการจัดการของระบบการศึกษาที่คุณกำลังศึกษา']].replace(regex=scale)
labels = ['สภาพแวดล้อมการเรียนรู้',
          'สภาพแวดล้อมการเรียนรู้ต่อประสิทธิภาพในการเรียน',
          'วิธีการสอน',
          'อาจารย์มีส่วนร่วมในการสร้างประสบการณ์การเรียนที่ดี'
          'การเรียนรู้ในระหว่างการเรียน',
          'ความตั้งใจในต่อการประสบความสำเร็จ',
          'สื่อการสอน',
          'เทคโนโลยีสารสนเทศและการสื่อสารต่อการเรียน',
          'สภาพแวดล้อมสังคมและวัฒนธรรมต่อการเรียน',
          'โครงสร้างและการจัดการของระบบการศึกษา']
vals = satisfication.mean()
fig = go.Figure(go.Bar(
        y=labels,
        x=vals,
        text=vals,
        texttemplate="%{value}",
        orientation='h',
        marker=dict(color=px.colors.qualitative.Set3),
    ))
fig.update_layout(
    font_family="TH Sarabun New",
    height=1000, width=1000
 )
fig.update_layout(title={
        'text': "ความพึงพอใจของการเรียนการสอนในด้านต่างๆ",
        'x': 0.5},
                  xaxis_title="จำนวนนักศึกษา(คน)",
                  yaxis_title="หัวข้อความพึงพอใจ",
                  yaxis={'categoryorder':'total ascending'},
                  xaxis_range=[1,5],
                  xaxis = dict(
                      tickmode = "array",
                      tickvals = np.arange(len(vals))+1,
                      ticktext = ["1 (น้อยที่สุด)", '2', '3', '4', "5 (มากที่สุด)"]
                  ))
fig.show()

"""**ท่านพึงพอใจกับสภาพแวดล้อมการเรียนรู้**"""

column_position = 6

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

A='เห็นด้วยมากที่สุด'
B='เห็นด้วยมาก'
C='เห็นด้วยปานกลาง'
D='ไม่เห็นด้วย '
E='ไม่เห็นด้วยอย่างยิ่ง'
x_values = [E, D, C, B, A]
y_values = [2, 1, 20, 55, 31]
hover_text = ["คะแนน: " + str(val) for val in y_values]
point_positions = [2, 1, 20, 55, 31]
colors = ['#A96E7F', '#D69593', '#794B69','#492D53','#5B5581']
fig = go.Figure()
fig.add_trace(go.Scatter(
    x=x_values,
    y=y_values,
    mode='markers+text',
    name='Scatter Plot',
    marker=dict(
        size=25,
        symbol='circle',
        color=colors
    ),
    text=point_positions,
    textposition='top center',
    hovertext=hover_text
))
fig.update_layout(title='ความพึงพอใจกับสภาพแวดล้อมการเรียนรู้')

fig.update_layout(
    font_family="TH Sarabun New",
    height=700, width=800,
    title={
        'text': "ความพึงพอใจกับสภาพแวดล้อมการเรียนรู้",
        'x': 0.5}
 )

fig.show()

"""**ท่านคิดว่าสภาพแวดล้อมการเรียนรู้มีผลต่อประสิทธิภาพในการเรียนการสอน**"""

column_position = 7

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

A='เห็นด้วยมากที่สุด'
B='เห็นด้วยมาก'
C='เห็นด้วยปานกลาง'
D='ไม่เห็นด้วย '
E='ไม่เห็นด้วยอย่างยิ่ง'
x_values = [E,D, C, B, A]
y_values = [0, 0, 3, 24, 82]
bubble_sizes = [0, 0, 3, 24, 82]
bubble_labels = [str(size) for size in bubble_sizes]
colors = ['#A96E7F', '#D69593', '#794B69','#5B5581','#492D53']
fig = go.Figure(go.Scatter(
    x=x_values,
    y=y_values,
    mode='markers+text',
    text=bubble_labels,
    textposition='bottom center',
    marker=dict(
        size=bubble_sizes,
        sizemode='diameter',
        sizeref=2.*max(bubble_sizes)/(20.**2),
        sizemin=4,
        color=colors
    )
))
fig.update_layout(
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    font_family="TH Sarabun New",
    height=700, width=800,
    title={
        'text': "ท่านรู้สึกว่าสภาพแวดล้อมการเรียนรู้มีผลต่อประสิทธิภาพในการเรียนการสอน",
        'x': 0.5}
)
fig.show()

"""**ท่านมีความพึงพอใจในวิธีการสอนของครูหรืออาจารย์**"""

column_position = 8

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

A='เห็นด้วยมากที่สุด'
B='เห็นด้วยมาก'
C='เห็นด้วยปานกลาง'
D='ไม่เห็นด้วย '
E='ไม่เห็นด้วยอย่างยิ่ง'
labels = [A, B, C, D, E]
values = [13, 40, 49, 7, 0]
colors = ['#C6AC84', '#E2E5CC',	'#D9C2BD',	'#A2C4C6',	'#82B2B7']

fig = go.Figure(go.Funnel(
    y=labels,
    x=values,
    textinfo="value",
    #marker=dict(color=colors)
    marker=dict(color=px.colors.qualitative.Set3_r)
))

fig.update_layout(
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    font_family="TH Sarabun New",
    height=700, width=1000,
    title={
        'text': "ความพึงพอใจกับวิธีการสอนของครูหรืออาจารย์",
        'x': 0.5}
)

fig.show()

"""**ท่านรู้สึกว่าครูหรืออาจารย์มีส่วนร่วมในการสร้างประสบการณ์การเรียนที่ดี**"""

column_position = 9

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

A='เห็นด้วยมากที่สุด'
B='เห็นด้วยมาก'
C='เห็นด้วยปานกลาง'
D='ไม่เห็นด้วย '
E='ไม่เห็นด้วยอย่างยิ่ง'
labels = [f'{E}=1', f'{D}=2', f'{C}=14', f'{B}=39',f'{A}=53']
sizes = [1, 2, 14, 39, 53]

colors = ['#D69593','#A96E7F', '#794B69','#5B5581','#492D53']

fig = px.scatter(x=sizes, y=sizes, size=sizes, color=sizes, text=labels,
                 labels={'x': 'ขนาด', 'y': 'ขนาด'}, color_continuous_scale=colors)

fig.update_traces(marker=dict(line=dict(width=2, color='DarkSlateGrey')),
                  selector=dict(mode='markers'))

fig.update_layout(showlegend=False)

fig.update_layout(
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    font_family="TH Sarabun New",
    height=700, width=800,
    title={
        'text': "ท่านรู้สึกว่าครูหรืออาจารย์ที่มีส่วนร่วมในการสร้างประสบการณ์การเรียนที่ดี",
        'x': 0.5}
)

fig.show()

"""**ท่านรู้สึกพึงพอใจกับการเรียนรู้ในระหว่างการเรียน**"""

column_position = 10

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

pip install squarify

import squarify
A='เห็นด้วยมากที่สุด'
B='เห็นด้วยมาก'
C='เห็นด้วยปานกลาง'
D='ไม่เห็นด้วย '
E='ไม่เห็นด้วยอย่างยิ่ง'
sizes = [1, 5, 39, 42, 22]
labels = [f'{E}=1', f'{D}=5', f'{C}=39', f'{B}=42',f'{A}=22']
data_feel = pd.DataFrame({'label': labels, 'size': sizes})

fig = px.treemap(data_feel, path=['label'], values='size')

colors = ['#C6AC84', '#E2E5CC',	'#D9C2BD',	'#A2C4C6',	'#82B2B7']

fig.update_traces(marker=dict(colors=colors))

fig.update_layout(
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    font_family="TH Sarabun New",
    height=700, width=1000,
    title={
        'text': "ความพึงพอใจกับการเรียนรู้ในระหว่างการเรียน",
        'x': 0.5}
)


fig.show()

"""**ท่านรู้สึกว่าความตั้งใจในการเรียนรู้มีผลต่อการประสบความสำเร็จในการเรียน**"""

column_position = 11

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

A='เห็นด้วยมากที่สุด'
B='เห็นด้วยมาก'
C='เห็นด้วยปานกลาง'
D='ไม่เห็นด้วย '
E='ไม่เห็นด้วยอย่างยิ่ง'
sizes = [66, 38, 3, 2, 0]
labels = [f'{A}=66', f'{B}=38', f'{C}=3', f'{D}=2',f'{E}=0']


# หาส่วนที่มีคนตอบเยอะสุด
max_index = sizes.index(max(sizes))
explode = [0] * len(labels)
explode[max_index] = 0.1  # highlight ส่วนที่มีคนตอบเยอะสุด

# สร้าง Pie Chart
colors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', '#c2c2f0']  # กำหนดสีให้แต่ละส่วน
fig = go.Figure(data=[go.Pie(labels=labels, values=sizes,
                             hole=0.3,
                             marker=dict(colors=px.colors.qualitative.Set3_r),
                             pull=[0.1 if i == max_index else 0 for i in range(len(labels))],
                             textinfo='percent',
                             hoverinfo='label+percent'
                            )])

# กำหนดรายละเอียดเพิ่มเติม
fig.update_layout(
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    font_family="TH Sarabun New",
    height=700, width=1000,
    title={
        'text': "ท่านรู้สึกว่าความตั้งใจในการเรียนรู้มีผลต่อการประสบความสำเร็จในการเรียน",
        'x': 0.5}
)

# แสดงกราฟ
fig.show()

"""**ท่านพึงพอใจกับสื่อการสอนที่ใช้ในชั้นเรียน (เช่น หนังสือเรียน, วิดีโอการสอน, หรือโปรแกรมคอมพิวเตอร์)**"""

column_position = 12

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

# ข้อมูล
sizes = [21, 50, 29, 8, 1]
labels = [A,B,C,D,E]

colors = ['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue', 'lightpink']

fig = go.Figure(data=[go.Bar(y=labels, x=sizes, orientation='h',
                             text=sizes, textposition='inside',
                             marker=dict(color=px.colors.qualitative.Set3))])

fig.update_layout(
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    font_family="TH Sarabun New",
    height=700, width=1000,
    xaxis_title='Sizes',
    title={
        'text': "ความพึงพอใจกับสื่อการสอนที่ใช้ในชั้นเรียน (เช่น หนังสือเรียน, วิดีโอการสอน, หรือโปรแกรมคอมพิวเตอร์)",
        'x': 0.5}
)

fig.show()

"""**ท่านคิดว่าการใช้เทคโนโลยีสารสนเทศและการสื่อสารมีผลต่อการเรียนการสอน**"""

column_position = 13

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

sizes = [21, 50, 29, 8, 1]
labels = [f'{A}=21', f'{B}=50', f'{C}=29', f'{D}=8',f'{E}=1']
colors = ['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue', 'lightpink']

fig = go.Figure(data=[go.Pie(labels=labels, values=sizes, hole=0.3, marker=dict(colors=px.colors.qualitative.Pastel1))])

fig.update_layout(title='ความคิดเห็นในเรื่องการใช้เทคโนโลยีสารสนเทศและการสื่อสารมีผลต่อการเรียนการสอน')

fig.update_layout(
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    font_family="TH Sarabun New",
    height=700, width=1000,
    xaxis_title='Sizes',
    title={
        'text': "ท่านรู้สึกว่าการใช้เทคโนโลยีสารสนเทศและการสื่อสารมีผลต่อการเรียนการสอน",
        'x': 0.5}
)
fig.show()

"""**ท่านคิดว่าสภาพแวดล้อมสังคมและวัฒนธรรมมีผลต่อการเรียนการสอน**"""

column_position = 14

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

labels = [A, B, C, D, E]
sizes = [73, 26, 7, 3,0]
colors = ['#C6AC84', '#E2E5CC',	'#D9C2BD',	'#A2C4C6',	'#82B2B7']

fig = go.Figure(data=[go.Bar(y=labels, x=sizes, orientation='h',
                             text=sizes, textposition='inside',
                             marker=dict(color=colors))])

fig.update_layout(
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    font_family="TH Sarabun New",
    height=700, width=1000,
    xaxis_title='Sizes',
    title={
        'text': "ท่านรู้สึกว่าสภาพแวดล้อมสังคมและวัฒนธรรมมีผลต่อการเรียนการสอน",
        'x': 0.5}
)
fig.show()

"""**ท่านพึงพอใจกับโครงสร้างและการจัดการของระบบการศึกษาที่คุณกำลังศึกษา**"""

column_position = 15

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

y_values = [4, 8, 49, 30, 18]
bubble_sizes = [4, 8, 49, 30, 18]
bubble_labels = [str(size) for size in bubble_sizes]

colors = ['#D69593','#A96E7F', '#492D53','#5B5581','#794B69']

fig = go.Figure(go.Scatter(
    x=x_values,
    y=y_values,
    mode='markers+text',
    text=bubble_labels,
    textposition='bottom center',
    marker=dict(
        size=bubble_sizes,
        sizemode='diameter',
        sizeref=2.*max(bubble_sizes)/(20.**2),
        sizemin=4,
        color=colors
    )
))
fig.update_layout(
    height=700, width=1000,
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    title={
        'text': "ความพึงพอใจกับโครงสร้างและการจัดการของระบบการศึกษาที่คุณกำลังศึกษา",
        'x': 0.5},
    font_family="TH Sarabun New"
)
fig.show()

"""**ท่านคิดว่าในอนาคต การศึกษาปริญญาตรีในยังมีบทบาทสำคัญอยู่หรือไม่**"""

importan = data.groupby(data.iloc[:, 16])
importan = importan.size()
print(importan)

fig = px.pie(values=importan.values, names=importan.index,
             color_discrete_sequence=px.colors.qualitative.Pastel1)
fig.update_traces(texttemplate = "%{value} <br>(%{percent})",
                 textposition = "outside")
fig.update_layout(
    title={
        'text': "การศึกษาปริญญาตรียังมีบทบาทสำคัญอยู่หรือไม่",
        'x': 0.5
    },
    font_family="TH Sarabun New",
    height=700, width=700,legend=dict(
        title="ความสำคัญ",
        orientation="h",
        yanchor="bottom",
        y=1,
        xanchor="center",
        x=0.5
    )
 )
fig.show()

"""**จากข้อที่แล้ว ท่านคิดว่าเป็นเพราะเหตุ?**"""

#นำแถวที่มี '-' ออก
reason2 = data.drop(data[data['จากข้อที่แล้ว ท่านคิดว่าเป็นเพราะเหตุ?'] == ('-')].index)

stop_words = {'ทุกคน','ต้อง','ใน','เพื่อ','นำ','ไป','เพราะ','มี','ทุก','ขึ้น','ไว้','ย่อม','การ','จาก','เป็น','สิ่ง','ที่','ใน','อาจ','ถูก','มองว่า','เป็น','สิ่ง','แต่',\
              'ถ้า','ทุกคน','มี','เหมือนกัน','จาก','จะ','กลาย','ใช้','หลาย','ได้','บาง','ยัง','เช่น','คิด','ว่า','ใน','ไทย','รับ','และ','นั้นๆ','ส่วนตัว','ยังคง','อยู่'\
              'ไม่','ของ','ก็','ทำให้','ต่างๆ','แล้ว','กว่า','อยู่','เรา','ไม่','ต่อ','ให้','ด้าน','ใบ','หรือ','ป','ๆ','มัน','สาย','จรืง','อะไร','เน้น','เกินไป','มากกว่า'\
              'น่าจะ','จริง','คน','แค่','ใช่','มากกว่า','ใครๆ','ที่จะ','มาก','ทำ','ผู้คน','สำคัญ'}
path = '/content/drive/MyDrive/CS246/Prompt-Black.ttf'

#เลือกเฉพาะแถวที่ตอบ มีบทบาทสำคัญ
yes_data = reason2[reason2.iloc[:, 16] == 'มีบทบาทสำคัญ']
#เปลี่ยนคอลัมน์ 'จากข้อที่แล้ว ท่านคิดว่าเป็นเพราะเหตุ?' เป็นชนิด list
yes_word = yes_data['จากข้อที่แล้ว ท่านคิดว่าเป็นเพราะเหตุ?'].values.tolist()
#แบ่งคำ/ประโยคในแต่ละelement
wordLists = []
for w in yes_word:
  wordList = w.split(' ')
  wordLists.extend(wordList)
#ตัด element ที่เป็น ' ' ออก
for wo in wordLists:
  if wo == '':
    wordLists.remove(wo)
#นำทุก elements ใน list มารวมเป็นหนึ่ง str
word = ' '.join(wordLists).lower().strip('')
words = word_tokenize(word)
all_words = ' '.join(words).lower().strip('')


wordcloud = WordCloud(font_path=path,
                      stopwords = stop_words ,
                      background_color="white",
                      width=2000, # กว้าง
                      height=1200, # ยาว
                      #colormap = 'turbo', #ธีมสีในคำ
                      #colormap = 'nipy_spectral',
                      colormap = 'tab20',
                      collocations=False,
                      regexp=r"[\u0E00-\u0E7Fa-zA-Z']+",
                      prefer_horizontal = 0.7, #แสดงผลแนวนอน 0.7
                      max_words = 30
                      ).generate(all_words)
plt.imshow(wordcloud, cmap=plt.cm.gray, interpolation='bilinear')
plt.axis("off")
plt.show()

#เลือกเฉพาะแถวที่ตอบ ไม่มีบทบาทสำคัญ
no_data = data[data.iloc[:, 16] == 'ไม่มีบทบาทสำคัญ']
#เปลี่ยนคอลัมน์ 'จากข้อที่แล้ว ท่านคิดว่าเป็นเพราะเหตุ?' เป็นชนิด list
no_word = no_data['จากข้อที่แล้ว ท่านคิดว่าเป็นเพราะเหตุ?'].values.tolist()
#แบ่งคำ/ประโยคในแต่ละelement
wordLists = []
for w in no_word:
  wordList = w.split(' ')
  wordLists.extend(wordList)
#ตัด element ที่เป็น ' ' ออก
for wo in wordLists:
  if wo == '':
    wordLists.remove(wo)
#นำทุก elements ใน list มารวมเป็นหนึ่ง str
word = ' '.join(wordLists).lower().strip('')
words = word_tokenize(word)
all_words = ' '.join(words).lower().strip('')


wordcloud = WordCloud(font_path=path,
                      stopwords = stop_words ,
                      background_color="white",
                      width=2000, # กว้าง
                      height=1200, # ยาว
                      #colormap = 'turbo', #ธีมสีในคำ
                      #colormap = 'nipy_spectral',
                      colormap = 'tab20',
                      collocations=False,
                      regexp=r"[\u0E00-\u0E7Fa-zA-Z']+",
                      prefer_horizontal = 0.7, #แสดงผลแนวนอน 0.7
                      max_words = 20
                      ).generate(all_words)
plt.imshow(wordcloud, cmap=plt.cm.gray, interpolation='bilinear')
plt.axis("off")
plt.show()

"""# ส่วนที่ 3 : ความคาดหวังของการเรียนการสอนในอนาคต

**ทักษะอะไรที่นักศึกษาจำเป็นต้องมีสำหรับการเรียนการสอนในอนาคต?**
"""

#เปลี่ยนคอลัมน์ จาก dataframe เป็นชนิด list
x_word = data.iloc[:, 18].values.tolist()
#นำทุก elements ใน list มารวมเป็นหนึ่ง str
word = ' '.join(x_word).lower().strip('')
# ตัดคำด้วยเครื่องหมาย ","
words = word.split(', ')
#แบ่งคำ/ประโยคในแต่ละelement
wordLists = []
for w in words:
  wordList = w.split(' ')
  wordLists.extend(wordList)

#นับความถี่ของแต่ละข้อ
frequencies = {}
for wo in wordLists:
    if wo in frequencies:
        frequencies[wo] += 1
    else:
        frequencies[wo] = 1
print("ความถี่ของแต่ละคำ:")
for word, freq in frequencies.items():
    print(f"{word}: {freq}")

a='ทักษะการคิดวิเคราะห์และแก้ปัญหา'
a_d=95
b='ทักษะการเรียนรู้และปรับตัว'
b_d=94
c='ทักษะการสื่อสารและการทำงานเป็นทีม:'
c_d=90
d='ทักษะด้านเทคโนโลยี'
d_d=84
e='ทักษะด้านภาษา'
e_d=81
f='ทักษะด้านความคิดสร้างสรรค์'
f_d=73
g='ทักษะด้านความฉลาดทางอารมณ์'
g_d=83
h='ทักษะด้านความเป็นผู้นำ'
h_d=58

x_values = [a, b, c, d, e, f, g, h]
y_values = [95, 94, 90, 84, 81, 73, 83, 58]

colors = ['#03045e', '#023e8a', '#0077b6', '#0096c7', '#48cae4', '#90e0ef', '#00b4d8', '#ade8f4']

fig = go.Figure(data=[go.Bar(y=x_values, x=y_values, orientation='h',
                             text=y_values, textposition='inside',
                             marker=dict(color=colors
                                         ))])
fig.update_layout(title={
        'text': "ทักษะที่นักศึกษาจำเป็นต้องมีสำหรับการเรียนการสอนในอนาคต",
        'x': 0.5},
                  height=700, width=1000,
                  font_family="TH Sarabun New",
                  xaxis_title='จำนวนคน',
                  yaxis={'categoryorder':'total ascending'},
                  yaxis_title='คำตอบ')
fig.show()

"""**ท่านคิดว่าอะไรคือสิ่งที่สำคัญที่สุดที่เราควรทำเพื่อเตรียมพร้อมสำหรับการศึกษาในอนาคต?**"""

column_position = 19

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

A='เรียนรู้ด้วยตนเอง'
B='คิดวิเคราะห์ แก้ปัญหา'
C='สื่อสาร ทำงานเป็นทีม'
D='ยืดหยุ่น ปรับตัว'
E='อื่นๆ'

x_values = [E, D, C, B, A]
y_values = [0, 48, 9, 26, 26]
bubble_sizes = [0, 48, 9, 26, 26]
bubble_labels = [str(size) for size in bubble_sizes]
#hover_text = ["คะแนน: " + str(val) for val in y_values]
#point_positions = [0, 48, 9, 26, 26]
colors = ['#D69593', '#492D53','#A96E7F','#794B69','#794B69']

fig = go.Figure(go.Scatter(
    x=x_values,
    y=y_values,
    mode='markers+text',
    text=bubble_labels,
    textposition='bottom center',
    marker=dict(
        size=bubble_sizes,
        sizemode='diameter',
        sizeref=2.*max(bubble_sizes)/(20.**2),
        sizemin=4,
        color=colors
    )
))

fig.update_layout(
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    title={
        'text': "สิ่งที่สำคัญที่สุดที่เราควรทำเพื่อเตรียมพร้อมสำหรับการศึกษาในอนาคต",
        'x': 0.5},
    height=700, width=1000,
    font_family="TH Sarabun New"
)
fig.show()

"""**ท่านคิดว่ารูปแบบการเรียนการสอนในอนาคตจะเปลี่ยนไปอย่างไร?**"""

column_position = 20

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

A='เน้นการเรียนรู้แบบ Personalized'
B='เน้นการเรียนรู้ด้วยตนเอง'
C='เน้นการเรียนรู้แบบ Active Learning'
D='เน้นการเรียนรู้แบบ Blended Learning'
E='อื่นๆ:'

sizes = [33, 16, 48, 12, 0]
labels = [f'{A} = 33', f'{B} = 16', f'{C} = 48', f'{D} = 12', f'{E} = 0']
colors = px.colors.qualitative.Pastel1

fig = go.Figure(data=[go.Pie(labels=labels, values=sizes)])
fig.update_traces(textinfo='label+percent', textfont_size=15,textposition = "outside")
#fig.update_traces(texttemplate = "%{value} <br>(%{percent})")

# ปรับสีให้เป็นสีอ่อน
fig.update_traces(marker=dict(colors=colors))

fig.update_layout(
    xaxis=dict(title='ความเห็น'),
    yaxis=dict(title='จำนวน'),
    title={
        'text': "การเปลี่ยนแปลงของรูปแบบการเรียนการสอนในอนาคต",
        'x': 0.5},
    height=700, width=1000,
    font_family="TH Sarabun New"
)
fig.show()

"""**ท่านคิดว่าเทคโนโลยีอะไรบ้างจะส่งผลต่อการศึกษาอนาคต**"""

column_position = 21

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

A='ปัญญาประดิษฐ์(AI)'
B='เทคโนโลยีเสมือนจริง(VR)'
C='เกม(Gamification)'
D='เทคโนโลยีการแปลภาษาแบบเรียลไทม์'
E='ทั้งหมด'

sizes = [67, 16, 13, 12, 1]
labels = [A, B, C, D, E]
colors = ['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue', 'lightpink']

fig = go.Figure(data=[go.Bar(y=labels, x=sizes, orientation='h',
                             text=sizes, textposition='inside',
                             marker=dict(color=px.colors.qualitative.Pastel))])
fig.update_layout(title={
        'text': "เทคโนโลยีที่จะส่งผลต่อการศึกษาอนาคต",
        'x': 0.5},
                  height=700, width=1000,
                  font_family="TH Sarabun New",
                  xaxis_title='Sizes')
fig.show()

"""**ท่านคิดว่าระบบการประเมินผลในอนาคตควรเป็นอย่างไร**"""

column_position = 23

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

A='ประเมินผลแบบองค์รวม'
B='ประเมินผลแบบ Real-time'
C='ประเมินผลแบบ Personalized'
D='ประเมินผลแบบ Peer-assessment'
E='อื่นๆ'

sizes = [45, 35, 25, 2, 2]
labels = [f'{A}=45', f'{B}=35', f'{C}=25', f'{D}=2',f'{E}=2']

import pandas as pd
data_system = pd.DataFrame({'label': labels, 'size': sizes})

fig = px.treemap(data_system, path=['label'], values='size')

fig.update_layout(title={
        'text': "ระบบการประเมินผลในอนาคต",
        'x': 0.5},
                  height=500, width=1000,
                  font_family="TH Sarabun New",
                  xaxis_title='Sizes')

colors = ['#A2C4C6','#82B2B7','#D9C2BD', '#E2E5CC',	'#C6AC84'	]
fig.update_traces(marker=dict(colors=colors))

fig.show()

"""**ท่านคิดว่าอะไรคืออุปสรรคที่สำคัญที่สุดต่อการศึกษาที่มีคุณภาพในอนาคต?**"""

column_position = 24

data_exam = data.iloc[:, column_position].value_counts()

data_exam_dict = data_exam.to_dict()

print(data_exam_dict)

A='ความเหลื่อมล้ำ'
B='เทคโนโลยี'
C='การจัดการเวลา'
D='แรงจูงใจ'
E='อื่นๆ:'

#fig, ax = plt.subplots(figsize=(8, 10))

sizes = [72, 7, 12, 15, 3]
labels = [f'{A}=72', f'{B}=7', f'{C}=12', f'{D}=15',f'{E}=3']
colors = ['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue', 'lightpink']

max_index = sizes.index(max(sizes))
explode = [0] * len(labels)
explode[max_index] = 0.1

fig = go.Figure(data=[go.Pie(labels=labels, values=sizes, hole=.3,
                             marker=dict(colors=px.colors.qualitative.Set3))])

fig.update_traces(textinfo='label+percent', textfont_size=15,textposition = "outside")

fig.update_layout(title={
        'text': "อุปสรรคที่สำคัญที่สุดต่อการศึกษาที่มีคุณภาพในอนาคต",
        'x': 0.5},
                  height=1000, width=1000,
                  font_family="TH Sarabun New",
                  xaxis_title='Sizes')

fig.show()